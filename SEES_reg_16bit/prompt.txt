Please act as a professional Verilog designer.

Implement a 16-bit register that stores and updates a 16-bit value using a rising-edge clock and a synchronous active-high reset.

Module name:
register_16bit

Input ports:
- clk: Clock signal used to synchronize data storage (rising-edge triggered).
- rst: Synchronous active-high reset; clears the register to 16'b0000_0000_0000_0000 on the next rising edge of clk.
- d [15:0]: 16-bit data input to be captured.

Output ports:
- q [15:0]: 16-bit output representing the current stored value.

Internal logic:
1. Edge-triggered storage: On each rising edge of clk, if rst is 1, q loads 16'b0; otherwise, q loads d.
2. Pure sequential behavior: No combinational paths from d to q outside the clocked process (no latches, no async reset).

Reset Behavior:
Synchronous active-high reset. At power-up, q may be undefined; system logic must assert rst to initialize q to 16'b0000_0000_0000_0000.

Generate correct synthesizable RTL Verilog code
