/* Generated by Yosys 0.54+23 (git sha1 513f0f16d, g++ 13.3.0-6ubuntu2~24.04 -fPIC -O3) */

(* top =  1  *)
(* src = "sub_8bit_signed.v:1.1-18.10" *)
module sub_8bit_signed(A, B, result, overflow);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  (* src = "sub_8bit_signed.v:2.24-2.25" *)
  input [7:0] A;
  wire [7:0] A;
  (* src = "sub_8bit_signed.v:3.24-3.25" *)
  input [7:0] B;
  wire [7:0] B;
  (* src = "sub_8bit_signed.v:8.23-8.28" *)
  (* unused_bits = "1 2 3 4 5 6 7" *)
  wire [7:0] B_neg;
  (* src = "sub_8bit_signed.v:9.23-9.27" *)
  wire [7:0] diff;
  (* src = "sub_8bit_signed.v:5.12-5.20" *)
  output overflow;
  wire overflow;
  (* src = "sub_8bit_signed.v:4.25-4.31" *)
  output [7:0] result;
  wire [7:0] result;
  assign _000_ = ~(B[5] | B[4]);
  assign _001_ = ~(B[3] | B[2]);
  assign _002_ = ~(B[1] | B[0]);
  assign _003_ = _002_ & _001_;
  assign _004_ = _003_ & _000_;
  assign _005_ = _004_ & ~(B[6]);
  assign _006_ = _005_ ^ B[7];
  assign _007_ = _006_ ^ A[7];
  assign _008_ = ~A[6];
  assign _009_ = _004_ ^ B[6];
  assign _010_ = _009_ | _008_;
  assign _011_ = _009_ ^ _008_;
  assign _012_ = ~A[5];
  assign _013_ = _003_ & ~(B[4]);
  assign _014_ = _013_ ^ B[5];
  assign _015_ = _014_ | _012_;
  assign _016_ = _014_ ^ _012_;
  assign _017_ = _003_ ^ B[4];
  assign _018_ = _017_ | ~(A[4]);
  assign _019_ = _016_ & ~(_018_);
  assign _020_ = _015_ & ~(_019_);
  assign _021_ = _017_ ^ A[4];
  assign _022_ = _016_ & ~(_021_);
  assign _023_ = ~A[3];
  assign _024_ = _002_ & ~(B[2]);
  assign _025_ = _024_ ^ B[3];
  assign _026_ = _025_ | _023_;
  assign _027_ = _025_ ^ _023_;
  assign _028_ = _002_ ^ B[2];
  assign _029_ = _028_ | ~(A[2]);
  assign _030_ = _027_ & ~(_029_);
  assign _031_ = _026_ & ~(_030_);
  assign _032_ = _028_ ^ A[2];
  assign _033_ = _027_ & ~(_032_);
  assign _034_ = ~A[1];
  assign _035_ = ~(B[1] ^ B[0]);
  assign _036_ = _035_ | _034_;
  assign _037_ = _035_ ^ _034_;
  assign _038_ = ~(A[0] & B[0]);
  assign _039_ = _037_ & ~(_038_);
  assign _040_ = _036_ & ~(_039_);
  assign _041_ = _033_ & ~(_040_);
  assign _042_ = _031_ & ~(_041_);
  assign _043_ = _022_ & ~(_042_);
  assign _044_ = _020_ & ~(_043_);
  assign _045_ = _011_ & ~(_044_);
  assign _046_ = _010_ & ~(_045_);
  assign result[7] = _046_ ^ _007_;
  assign _047_ = ~(result[7] ^ A[7]);
  assign overflow = _007_ & ~(_047_);
  assign result[1] = ~(_038_ ^ _037_);
  assign result[2] = _040_ ^ _032_;
  assign _048_ = ~(_040_ | _032_);
  assign _049_ = _048_ | ~(_029_);
  assign result[3] = _049_ ^ _027_;
  assign result[4] = _042_ ^ _021_;
  assign _050_ = ~(_042_ | _021_);
  assign _051_ = _050_ | ~(_018_);
  assign result[5] = _051_ ^ _016_;
  assign result[6] = ~(_044_ ^ _011_);
  assign result[0] = A[0] ^ B[0];
  assign B_neg[0] = B[0];
  assign diff = result;
endmodule
