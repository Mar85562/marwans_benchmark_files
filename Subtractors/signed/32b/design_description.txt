Please act as a professional Verilog designer.

Implement a module that subtracts two 32-bit signed (two’s-complement) inputs and produces a 32-bit signed result with an overflow flag. The design is purely combinational.

Module name:
sub_32bit_signed

Input ports:
- a [31:0]: 32-bit signed operand A (two’s-complement).
- b [31:0]: 32-bit signed operand B (two’s-complement) to be subtracted from A.

Output ports:
- result [31:0]: 32-bit signed difference A − B (two’s-complement).
- overflow: 1-bit flag indicating signed overflow during subtraction.

Internal logic:
1. Signed subtraction: Compute result as the two’s-complement subtraction of a and b in combinational logic.
2. Overflow detection: Set overflow = 1 when a and b have different signs and the sign of result differs from the sign of a; otherwise overflow = 0.
3. Combinational behavior: No clock or reset; outputs update immediately with changes on a or b.

Generate correct synthesizable RTL Verilog code
