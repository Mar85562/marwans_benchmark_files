Please act as a professional Verilog designer.

Implement a 32-register file module with two asynchronous read ports and one synchronous write port. Register 0 is hardwired to zero and cannot be modified.

Module name:
regfile

Input ports:
- clk: Clock signal used for synchronous write operations.
- we: Write enable signal. When high, writes data to the register at the given write address on the rising clock edge.
- waddr [4:0]: 5-bit write address specifying which register to write to.
- wdata [31:0]: 32-bit data input to be written into the register file.
- raddr1 [4:0]: 5-bit address for the first read port.
- raddr2 [4:0]: 5-bit address for the second read port.

Output ports:
- rdata1 [31:0]: 32-bit output corresponding to the contents of the register specified by raddr1.
- rdata2 [31:0]: 32-bit output corresponding to the contents of the register specified by raddr2.

Internal logic:
1. Register Array: The module maintains 32 general-purpose registers (regs[0:31]), each 32 bits wide.

2. Synchronous Write: On each rising edge of clk, if we is high and waddr is not 0, wdata is written into regs[waddr]. Writes to register 0 are ignored to preserve the hardwired-zero semantics.

3. Asynchronous Read: rdata1 and rdata2 are driven combinationally from regs[raddr1] and regs[raddr2]. If a read address is 0, the corresponding output is forced to 32'b0 regardless of regs[0].

4. Read-During-Write Semantics: If a read address equals the write address while we is asserted, the read data reflects the updated register contents after the rising edge of clk (write-first behavior in simulation with an async read mux).

5. Zero Register Behavior: Register 0 is permanently tied to zero. All reads from address 0 return 0; all writes to address 0 have no effect.

Reset Behavior:
No explicit reset input is included. At power-up in hardware, registers other than x0 may be undefined; downstream logic must not assume specific initial values except that reads of address 0 always return 0.

Generate correct synthesizable RTL Verilog code