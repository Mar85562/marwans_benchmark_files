Please act as a professional Verilog designer.

Implement a module of a 8-bit signed multiplier using 2’s complement arithmetic in combinational logic.

Module name:
  mult_signed_8bit

Input ports:
  a[7:0]: 8-bit signed input operand A.
  b[7:0]: 8-bit signed input operand B.

Output ports:
  product[15:0]: 16-bit signed output representing the product of A and B.

Implementation:
The module computes the absolute values of a and b by checking the sign bit and negating if negative.
It then generates 8 partial products by ANDing each bit of the absolute value of b with the entire absolute value of a and shifting it left by the bit index.
The partial products are summed combinationally to get the unsigned product.
Finally, the product's sign is adjusted by negating the unsigned sum if the signs of a and b differ.

Give me the complete code.