Please act as a professional Verilog designer.

Implement a complete UART (Universal Asynchronous Receiver/Transmitter) interface consisting of receiver and transmitter modules with realistic timing and control logic.

Module name:
    - uart_rx (UART Receiver)
    - uart_tx (UART Transmitter)
    - uart_top (Top-level integration and echo test)

Functionality:
The design should support asynchronous serial communication via UART protocol with the following features:
- Start bit detection and synchronization
- 8-bit data payload
- 1 stop bit
- Fixed baud rate communication
- Clock-accurate bit sampling
- FSM-based control logic

### Parameters (for both RX and TX):
- `BIT_RATE`: Desired baud rate for UART transmission (e.g., 9600)
- `CLK_HZ`: System clock frequency (e.g., 50 MHz)
- `PAYLOAD_BITS`: Number of data bits per frame (default 8)
- `STOP_BITS`: Number of stop bits (default 1)

### Input/Output Ports:

**uart_rx module**
- `clk`: System clock input
- `resetn`: Asynchronous active-low reset
- `uart_rxd`: Incoming UART signal
- `uart_rx_en`: Enable signal for RX
- `uart_rx_data [PAYLOAD_BITS-1:0]`: Output data received
- `uart_rx_valid`: Signal indicating valid data available
- `uart_rx_break`: High when a BREAK message is detected (all zeros payload)

**uart_tx module**
- `clk`: System clock input
- `resetn`: Asynchronous active-low reset
- `uart_tx_en`: Signal to start sending data
- `uart_tx_data [PAYLOAD_BITS-1:0]`: Data to be transmitted
- `uart_txd`: Outgoing UART signal
- `uart_tx_busy`: High when transmission is in progress

**uart_top module**
- Integrates `uart_rx` and `uart_tx`
- Loops received data back to TX for echo testing
- Displays received data on 8-bit LEDs for debug
- Uses `uart_rx_valid` as TX enable trigger
- Accepts UART RX input from a pin and outputs TX

The implementation must use FSM-based design for each stage (idle, start, send/receive, stop), maintain proper timing based on system clock and baud rate, and be cleanly modularized. No parity or FIFO is required.

Give me the complete code for all three modules: `uart_rx`, `uart_tx`, and `uart_top`.
